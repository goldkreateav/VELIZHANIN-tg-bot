// Telegram Web App API
const tg = window.Telegram.WebApp;

// –ö–æ–Ω—Ñ–∏–≥ API
let API_BASE_PATH = '/api';
async function loadConfig() {
    try {
        const res = await fetch('/config');
        const cfg = await res.json();
        if (cfg && cfg.apiBasePath) {
            API_BASE_PATH = cfg.apiBasePath;
        }
    } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥, –∏—Å–ø–æ–ª—å–∑—É–µ–º /api –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Web App
    tg.ready();
    tg.expand();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–º—É
    document.body.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#ffffff');
    document.body.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#000000');
    document.body.style.setProperty('--tg-theme-button-color', tg.themeParams.button_color || '#2481cc');
    document.body.style.setProperty('--tg-theme-button-text-color', tg.themeParams.button_text_color || '#ffffff');
    document.body.style.setProperty('--tg-theme-secondary-bg-color', tg.themeParams.secondary_bg_color || '#f8f9fa');
    document.body.style.setProperty('--tg-theme-hint-color', tg.themeParams.hint_color || '#999999');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    loadConfig().then(() => {
        loadLeaderboard();
        loadFeedback();
        loadStats();
    });
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º
    setupEventListeners();

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –±–µ–∑ inline-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    document.querySelectorAll('.nav-btn').forEach((btn) => {
        btn.addEventListener('click', (ev) => {
            const tabName = btn.getAttribute('data-tab');
            showTab(tabName, ev);
        });
    });

    // –ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const lbRefresh = document.getElementById('leaderboard-refresh');
    if (lbRefresh) lbRefresh.addEventListener('click', loadLeaderboard);
    const statsRefresh = document.getElementById('stats-refresh');
    if (statsRefresh) statsRefresh.addEventListener('click', loadStats);
});

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–∞–±–∞–º
function showTab(tabName, ev) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞–±—ã
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–±
    document.getElementById(tabName).classList.add('active');
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É
    if (ev && ev.target) {
        ev.target.classList.add('active');
    } else {
        const btn = document.querySelector(`.nav-btn[data-tab="${tabName}"]`);
        if (btn) btn.classList.add('active');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–∞
    switch(tabName) {
        case 'leaderboard':
            document.body.classList.remove('doom-active');
            loadLeaderboard();
            break;
        case 'feedback':
            document.body.classList.remove('doom-active');
            loadFeedback();
            break;
        case 'stats':
            document.body.classList.remove('doom-active');
            loadStats();
            break;
        case 'doom':
            // –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            document.body.classList.add('doom-active');
            break;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
async function loadLeaderboard() {
    const content = document.getElementById('leaderboard-content');
    content.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
    
    try {
        const response = await fetch(`${API_BASE_PATH}/leaderboard`);
        const data = await response.json();
        
        if (data.success && data.data.length > 0) {
            content.innerHTML = data.data.map((player, index) => {
                const rankClass = index === 0 ? 'first' : index === 1 ? 'second' : index === 2 ? 'third' : '';
                const date = new Date(player.completed_at).toLocaleDateString('ru-RU');
                
                return `
                    <div class="leaderboard-item">
                        <div class="rank ${rankClass}">${index + 1}</div>
                        <div class="player-info">
                            <div class="player-name">${player.first_name || player.username || '–ê–Ω–æ–Ω–∏–º'}</div>
                            <div class="player-score">${player.score} –æ—á–∫–æ–≤</div>
                            <div class="player-date">${date}</div>
                        </div>
                    </div>
                `;
            }).join('');
        } else {
            content.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üèÜ</div>
                    <p>–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—à–µ–ª –∫–≤–µ—Å—Ç.<br>–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!</p>
                </div>
            `;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤:', error);
        content.innerHTML = '<div class="message error">–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö</div>';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
async function loadFeedback() {
    const content = document.getElementById('feedback-content');
    content.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤...</div>';
    
    try {
        const response = await fetch(`${API_BASE_PATH}/feedback`);
        const data = await response.json();
        
        if (data.success && data.data.length > 0) {
            content.innerHTML = data.data.map(feedback => {
                const date = new Date(feedback.created_at).toLocaleDateString('ru-RU');
                const stars = '‚≠ê'.repeat(feedback.rating || 5);
                
                return `
                    <div class="feedback-item">
                        <div class="feedback-header">
                            <div class="feedback-name">${feedback.name}</div>
                            <div class="feedback-rating">${stars}</div>
                        </div>
                        <div class="feedback-message">${feedback.message}</div>
                        <div class="feedback-date">${date}</div>
                    </div>
                `;
            }).join('');
        } else {
            content.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üí¨</div>
                    <p>–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.<br>–û—Å—Ç–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π!</p>
                </div>
            `;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤:', error);
        content.innerHTML = '<div class="message error">–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤</div>';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function loadStats() {
    const content = document.getElementById('stats-content');
    content.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>';
    
    try {
        const response = await fetch(`${API_BASE_PATH}/stats`);
        const data = await response.json();
        
        if (data.success) {
            const stats = data.data;
            content.innerHTML = `
                <div class="stat-card">
                    <div class="stat-number">${stats.totalPlayers}</div>
                    <div class="stat-label">–ò–≥—Ä–æ–∫–æ–≤</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${stats.totalFeedback}</div>
                    <div class="stat-label">–û—Ç–∑—ã–≤–æ–≤</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${stats.averageScore}</div>
                    <div class="stat-label">–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</div>
                </div>
                <div class="top-player">
                    <h4>üèÜ –õ–∏–¥–µ—Ä</h4>
                    ${stats.topPlayer ? `
                        <div class="player-name">${stats.topPlayer.first_name || stats.topPlayer.username || '–ê–Ω–æ–Ω–∏–º'}</div>
                        <div class="player-score">${stats.topPlayer.score} –æ—á–∫–æ–≤</div>
                    ` : '<p>–ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–∞</p>'}
                </div>
            `;
        } else {
            content.innerHTML = '<div class="message error">–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</div>';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        content.innerHTML = '<div class="message error">–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</div>';
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    const form = document.getElementById('feedback-form');
    form.addEventListener('submit', handleFeedbackSubmit);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
    document.querySelectorAll('.star').forEach(star => {
        star.addEventListener('click', function() {
            const rating = parseInt(this.dataset.rating);
            setRating(rating);
        });
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
async function handleFeedbackSubmit(event) {
    event.preventDefault();
    
    const form = event.target;
    const submitBtn = form.querySelector('.submit-btn');
    const name = form.name.value.trim();
    const message = form.message.value.trim();
    const rating = getSelectedRating();
    
    if (!name || !message) {
        showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    submitBtn.disabled = true;
    submitBtn.textContent = 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞...';
    
    try {
        const response = await fetch(`${API_BASE_PATH}/feedback`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                name,
                message,
                rating,
                userId: tg.initDataUnsafe?.user?.id || null
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showMessage('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üéâ', 'success');
            form.reset();
            setRating(5);
            loadFeedback(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤
        } else {
            showMessage(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞:', error);
        showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞', 'error');
    } finally {
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        submitBtn.disabled = false;
        submitBtn.textContent = 'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å';
    }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
function setRating(rating) {
    document.querySelectorAll('.star').forEach((star, index) => {
        if (index < rating) {
            star.classList.add('active');
        } else {
            star.classList.remove('active');
        }
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
function getSelectedRating() {
    const activeStars = document.querySelectorAll('.star.active');
    return activeStars.length;
}

// –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
function showMessage(text, type) {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    document.querySelectorAll('.message').forEach(msg => msg.remove());
    
    const message = document.createElement('div');
    message.className = `message ${type}`;
    message.textContent = text;
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–±
    const activeTab = document.querySelector('.tab-content.active');
    activeTab.insertBefore(message, activeTab.firstChild);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        message.remove();
    }, 3000);
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –≤ Telegram
function openInTelegram() {
    tg.close();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('visibilitychange', function() {
    if (!document.hidden) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
        const activeTab = document.querySelector('.tab-content.active');
        if (activeTab) {
            const tabId = activeTab.id;
            switch(tabId) {
                case 'leaderboard':
                    loadLeaderboard();
                    break;
                case 'feedback':
                    loadFeedback();
                    break;
                case 'stats':
                    loadStats();
                    break;
            }
        }
    }
});
