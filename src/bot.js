const { Telegraf, session } = require('telegraf');
const { authMiddleware } = require('./middlewares/auth');
const { loggerMiddleware } = require('./middlewares/logger');

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥
const startCommand = require('./commands/start');
const helpCommand = require('./commands/help');
const pingCommand = require('./commands/ping');

// –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç
const { safeMarkdownMessage } = require('./utils/format');

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// Middleware –¥–ª—è —Å–µ—Å—Å–∏–π
bot.use(session());

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot.use(loggerMiddleware);

// Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
bot.use(authMiddleware);

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
bot.command('start', startCommand);
bot.command('help', helpCommand);
bot.command('ping', pingCommand);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
bot.action('quest_start', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    await ctx.reply('üéØ –ö–≤–µ—Å—Ç —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω! –ü–æ–∫–∞ —á—Ç–æ –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ quest_start:', error);
  }
});

bot.action('ai_advice', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    await ctx.reply('ü§ñ AI-—Å–æ–≤–µ—Ç–Ω–∏–∫ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω! –ü–æ–∫–∞ —á—Ç–æ –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ ai_advice:', error);
  }
});

bot.action('about', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    const aboutMessage = `‚ÑπÔ∏è *–û –±–æ—Ç–µ VELIZHANIN*

üéØ *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
‚Ä¢ AI-—Å–æ–≤–µ—Ç–Ω–∏–∫ –Ω–∞ –±–∞–∑–µ OpenAI
‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
‚Ä¢ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏

üöÄ *–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:*
‚Ä¢ Node.js + Telegraf
‚Ä¢ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ OpenAI GPT-3.5
‚Ä¢ Telegram Mini App

üë®‚Äçüíª *–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è:* –°—Ç—É–¥–∏—è VELIZHANIN

üí¨ *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* ana_freud`;
    
    await ctx.reply(aboutMessage, safeMarkdownMessage(aboutMessage));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ about:', error);
    // Fallback –±–µ–∑ Markdown
    await ctx.reply(`‚ÑπÔ∏è –û –±–æ—Ç–µ VELIZHANIN

üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
‚Ä¢ AI-—Å–æ–≤–µ—Ç–Ω–∏–∫ –Ω–∞ –±–∞–∑–µ OpenAI
‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
‚Ä¢ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏

üöÄ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
‚Ä¢ Node.js + Telegraf
‚Ä¢ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ OpenAI GPT-3.5
‚Ä¢ Telegram Mini App

üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è: –°—Ç—É–¥–∏—è VELIZHANIN

üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @goldreateav`);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', err);
  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

module.exports = { bot };
