const { Markup } = require('telegraf');
const db = require('../services/db');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
const feedbackStartHandler = async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if (!ctx.session) {
      ctx.session = {};
    }
    ctx.session.feedbackState = 'waiting_name';
    
    const message = `üí¨ *–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å*\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –±–æ—Ç–µ!\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    await ctx.reply(message, { 
      parse_mode: 'Markdown',
      ...keyboard 
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ feedback_start:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
const feedbackTextHandler = async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if (!ctx.session || !ctx.session.feedbackState) {
      return;
    }
    
    const text = ctx.message.text.trim();
    
    switch (ctx.session.feedbackState) {
      case 'waiting_name':
        ctx.session.feedbackName = text;
        ctx.session.feedbackState = 'waiting_message';
        
        await ctx.reply('üìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∑—ã–≤:');
        break;
        
      case 'waiting_message':
        ctx.session.feedbackMessage = text;
        ctx.session.feedbackState = 'waiting_rating';
        
        const ratingMessage = `‚≠ê –û—Ü–µ–Ω–∏—Ç–µ –±–æ—Ç–∞ –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:\n\n1‚≠ê - –ü–ª–æ—Ö–æ\n2‚≠ê - –ù–µ –æ—á–µ–Ω—å\n3‚≠ê - –ù–æ—Ä–º–∞–ª—å–Ω–æ\n4‚≠ê - –•–æ—Ä–æ—à–æ\n5‚≠ê - –û—Ç–ª–∏—á–Ω–æ!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 5:`;
        
        await ctx.reply(ratingMessage);
        break;
        
      case 'waiting_rating':
        const rating = parseInt(text);
        
        if (isNaN(rating) || rating < 1 || rating > 5) {
          await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 5:');
          return;
        }
        
        ctx.session.feedbackRating = rating;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
        try {
          const user = await db.getUserByTelegramId(ctx.from.id);
          const userId = user ? user.id : null;
          
          await db.saveFeedback(userId, ctx.session.feedbackName, ctx.session.feedbackMessage, rating);
          
          const thankMessage = `üéâ *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!*\n\n–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å!\n\n*–ò–º—è:* ${ctx.session.feedbackName}\n*–û—Ü–µ–Ω–∫–∞:* ${'‚≠ê'.repeat(rating)}\n*–°–æ–æ–±—â–µ–Ω–∏–µ:* ${ctx.session.feedbackMessage}`;
          
          const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
          ]);
          
          await ctx.reply(thankMessage, { 
            parse_mode: 'Markdown',
            ...keyboard 
          });
          
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        ctx.session.feedbackState = null;
        ctx.session.feedbackName = null;
        ctx.session.feedbackMessage = null;
        ctx.session.feedbackRating = null;
        break;
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ feedback_text:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    if (ctx.session) {
      ctx.session.feedbackState = null;
    }
  }
};

module.exports = {
  feedbackStartHandler,
  feedbackTextHandler
};
