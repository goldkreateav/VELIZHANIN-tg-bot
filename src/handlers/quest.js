const { Markup } = require('telegraf');
const apiService = require('../services/api');
const db = require('../services/db');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫–≤–µ—Å—Ç–∞
async function showQuestQuestion(ctx, questionIndex) {
  const questions = ctx.session.questQuestions;
  const question = questions[questionIndex];
  
  const message = `üéØ *–í–æ–ø—Ä–æ—Å ${questionIndex + 1} –∏–∑ ${questions.length}*\n\n${question.question}`;
  
  const keyboard = {
    inline_keyboard: question.options.map((option, index) => [
      {
        text: `${String.fromCharCode(65 + index)}. ${option}`,
        callback_data: `quest_answer_${questionIndex}_${index}`
      }
    ])
  };
  
  await ctx.reply(message, { 
    parse_mode: 'Markdown',
    reply_markup: keyboard 
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
async function finishQuest(ctx) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (!ctx.session || !ctx.session.questQuestions || !ctx.session.questAnswers) {
    await ctx.reply('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç.');
    return;
  }
  
  const questions = ctx.session.questQuestions;
  const answers = ctx.session.questAnswers;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const result = apiService.calculateQuestScore(answers, questions);
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const user = await db.getUserByTelegramId(ctx.from.id);
  if (user) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.saveQuestResult(user.id, result.score, result.results);
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
  let resultMessage = `üéâ *–ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n`;
  resultMessage += `üìä *–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${result.score}/${questions.length * 10} –æ—á–∫–æ–≤*\n\n`;
  
  resultMessage += `üìù *–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:*\n`;
  result.results.forEach((item, index) => {
    const emoji = item.isCorrect ? '‚úÖ' : '‚ùå';
    const userAnswerText = questions[index].options[item.userAnswer];
    const correctAnswerText = questions[index].options[item.correctAnswer];
    
    resultMessage += `${emoji} *–í–æ–ø—Ä–æ—Å ${index + 1}:* ${item.question}\n`;
    resultMessage += `–í–∞—à –æ—Ç–≤–µ—Ç: ${userAnswerText}\n`;
    if (!item.isCorrect) {
      resultMessage += `–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correctAnswerText}\n`;
    }
    resultMessage += `${item.explanation}\n\n`;
  });
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
  const percentage = (result.score / (questions.length * 10)) * 100;
  let grade = '';
  if (percentage >= 80) grade = '–û—Ç–ª–∏—á–Ω–æ! üèÜ';
  else if (percentage >= 60) grade = '–•–æ—Ä–æ—à–æ! üëç';
  else if (percentage >= 40) grade = '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ üìö';
  else grade = '–ù—É–∂–Ω–æ –ø–æ–¥—É—á–∏—Ç—å—Å—è üìñ';
  
  resultMessage += `üéØ *–û—Ü–µ–Ω–∫–∞: ${grade}*\n\n`;
  resultMessage += `üí° –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥—Ä—É–≥–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º?`;
  
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üîÑ –ü—Ä–æ–π—Ç–∏ –∫–≤–µ—Å—Ç —Å–Ω–æ–≤–∞', callback_data: 'quest_start' },
        { text: 'üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤', callback_data: 'leaderboard' }
      ],
      [
        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
      ]
    ]
  };
  
  await ctx.reply(resultMessage, { 
    parse_mode: 'Markdown',
    reply_markup: keyboard 
  });
  
  // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
  ctx.session.questState = 'completed';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∫–≤–µ—Å—Ç–∞
const questStartHandler = async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –∫–≤–µ—Å—Ç–∞
    if (!ctx.session) {
      ctx.session = {};
    }
    ctx.session.questState = 'starting';
    ctx.session.questAnswers = [];
    ctx.session.questCurrentQuestion = 0;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ API
    const questions = apiService.generateQuestQuestions();
    ctx.session.questQuestions = questions;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await showQuestQuestion(ctx, 0);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ quest_start:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–≤–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–≤–µ—Å—Ç–∞
const questAnswerHandler = async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
    if (!ctx.session) {
      ctx.session = {};
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–≤–µ—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω
    if (!ctx.session.questState || ctx.session.questState !== 'starting') {
      await ctx.reply('–ö–≤–µ—Å—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç —Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.');
      return;
    }
    
    const callbackData = ctx.callbackQuery.data;
    const [, , questionIndex, answerIndex] = callbackData.split('_');
    
    const questionIdx = parseInt(questionIndex);
    const answerIdx = parseInt(answerIndex);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –æ—Ç–≤–µ—Ç–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!ctx.session.questAnswers) {
      ctx.session.questAnswers = [];
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    ctx.session.questAnswers[questionIdx] = answerIdx;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã
    if (!ctx.session.questQuestions || ctx.session.questQuestions.length === 0) {
      await ctx.reply('–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å—ã –∫–≤–µ—Å—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã
    if (questionIdx + 1 < ctx.session.questQuestions.length) {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
      ctx.session.questCurrentQuestion = questionIdx + 1;
      await showQuestQuestion(ctx, questionIdx + 1);
    } else {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–µ—Å—Ç
      await finishQuest(ctx);
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ quest_answer:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

module.exports = {
  questStartHandler,
  questAnswerHandler,
  showQuestQuestion,
  finishQuest
};
