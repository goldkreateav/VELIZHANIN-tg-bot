const express = require('express');
const cors = require('cors');
const path = require('path');
const db = require('./services/db');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, '../public')));

// API Routes

// ะัะพะฒะตัะบะฐ ะทะดะพัะพะฒัั ัะตัะฒะธัะพะฒ
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    services: {
      database: 'connected',
      server: 'running'
    }
  });
});

// ะะพะปััะตะฝะธะต ัะฐะฑะปะธัั ะปะธะดะตัะพะฒ (JSON)
app.get('/api/leaderboard', async (req, res) => {
  try {
    const leaderboard = await db.getQuestLeaderboard(20);
    res.json({
      success: true,
      data: leaderboard,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('ะัะธะฑะบะฐ ะฟัะธ ะฟะพะปััะตะฝะธะธ ัะฐะฑะปะธัั ะปะธะดะตัะพะฒ:', error);
    res.status(500).json({
      success: false,
      error: 'ะัะธะฑะบะฐ ะฟัะธ ะทะฐะณััะทะบะต ัะฐะฑะปะธัั ะปะธะดะตัะพะฒ'
    });
  }
});

// ะัะฟัะฐะฒะบะฐ ะพะฑัะฐัะฝะพะน ัะฒัะทะธ
app.post('/api/feedback', async (req, res) => {
  try {
    const { name, message, rating, userId } = req.body;
    
    if (!name || !message) {
      return res.status(400).json({
        success: false,
        error: 'ะะผั ะธ ัะพะพะฑัะตะฝะธะต ะพะฑัะทะฐัะตะปัะฝั'
      });
    }
    
    console.log('ะะพะปััะตะฝ ะพัะทัะฒ:', { name, message, rating, userId });
    
    // ะัะปะธ userId ะฝะต ะฟะตัะตะดะฐะฝ, ัะพะทะดะฐะตะผ ะฐะฝะพะฝะธะผะฝัั ะทะฐะฟะธัั
    const result = await db.saveFeedback(userId || null, name, message, rating || 5);
    
    console.log('ะัะทัะฒ ัะพััะฐะฝะตะฝ ั ID:', result);
    
    res.json({
      success: true,
      message: 'ะกะฟะฐัะธะฑะพ ะทะฐ ะพะฑัะฐัะฝัั ัะฒัะทั!',
      id: result
    });
  } catch (error) {
    console.error('ะัะธะฑะบะฐ ะฟัะธ ัะพััะฐะฝะตะฝะธะธ ะพะฑัะฐัะฝะพะน ัะฒัะทะธ:', error);
    res.status(500).json({
      success: false,
      error: 'ะัะธะฑะบะฐ ะฟัะธ ัะพััะฐะฝะตะฝะธะธ ะพะฑัะฐัะฝะพะน ัะฒัะทะธ'
    });
  }
});

// ะะพะปััะตะฝะธะต ะฒัะตั ะพัะทัะฒะพะฒ
app.get('/api/feedback', async (req, res) => {
  try {
    const feedback = await db.getFeedback();
    res.json({
      success: true,
      data: feedback,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('ะัะธะฑะบะฐ ะฟัะธ ะฟะพะปััะตะฝะธะธ ะพัะทัะฒะพะฒ:', error);
    res.status(500).json({
      success: false,
      error: 'ะัะธะฑะบะฐ ะฟัะธ ะทะฐะณััะทะบะต ะพัะทัะฒะพะฒ'
    });
  }
});

// ะกัะฐัะธััะธะบะฐ ะฑะพัะฐ
app.get('/api/stats', async (req, res) => {
  try {
    const leaderboard = await db.getQuestLeaderboard(100);
    const feedback = await db.getFeedback();
    
    const totalPlayers = leaderboard.length;
    const totalFeedback = feedback.length;
    const averageScore = leaderboard.length > 0 
      ? Math.round(leaderboard.reduce((sum, player) => sum + player.score, 0) / leaderboard.length)
      : 0;
    
    res.json({
      success: true,
      data: {
        totalPlayers,
        totalFeedback,
        averageScore,
        topPlayer: leaderboard[0] || null
      }
    });
  } catch (error) {
    console.error('ะัะธะฑะบะฐ ะฟัะธ ะฟะพะปััะตะฝะธะธ ััะฐัะธััะธะบะธ:', error);
    res.status(500).json({
      success: false,
      error: 'ะัะธะฑะบะฐ ะฟัะธ ะทะฐะณััะทะบะต ััะฐัะธััะธะบะธ'
    });
  }
});

// ะะปะฐะฒะฝะฐั ัััะฐะฝะธัะฐ Mini App
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, '../public/index.html'));
});

// ะะฑัะฐะฑะพัะบะฐ 404
app.use((req, res) => {
  res.status(404).json({
    success: false,
    error: 'ะกััะฐะฝะธัะฐ ะฝะต ะฝะฐะนะดะตะฝะฐ'
  });
});

// ะะฑัะฐะฑะพัะบะฐ ะพัะธะฑะพะบ
app.use((error, req, res, next) => {
  console.error('ะัะธะฑะบะฐ ัะตัะฒะตัะฐ:', error);
  res.status(500).json({
    success: false,
    error: 'ะะฝัััะตะฝะฝัั ะพัะธะฑะบะฐ ัะตัะฒะตัะฐ'
  });
});

// ะะฐะฟััะบ ัะตัะฒะตัะฐ
app.listen(PORT, () => {
  console.log(`๐ ะกะตัะฒะตั ะทะฐะฟััะตะฝ ะฝะฐ ะฟะพััั ${PORT}`);
  console.log(`๐ฑ Mini App ะดะพัััะฟะตะฝ ะฟะพ ะฐะดัะตัั: http://localhost:${PORT}`);
});

module.exports = app;
