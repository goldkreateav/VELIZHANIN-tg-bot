/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 */

/**
 * –ö–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
 */
class BotError extends Error {
  constructor(message, code = 'BOT_ERROR', statusCode = 500) {
    super(message);
    this.name = 'BotError';
    this.code = code;
    this.statusCode = statusCode;
  }
}

/**
 * –ö–ª–∞—Å—Å –æ—à–∏–±–æ–∫ API
 */
class APIError extends Error {
  constructor(message, service = 'UNKNOWN', statusCode = 500) {
    super(message);
    this.name = 'APIError';
    this.service = service;
    this.statusCode = statusCode;
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –±–æ—Ç–∞
 */
function handleBotError(error, ctx) {
  console.error('–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', {
    error: error.message,
    stack: error.stack,
    userId: ctx.from?.id,
    username: ctx.from?.username,
    timestamp: new Date().toISOString()
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  let userMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  
  if (error instanceof BotError) {
    switch (error.code) {
      case 'INVALID_INPUT':
        userMessage = '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
        break;
      case 'QUEST_NOT_FOUND':
        userMessage = '‚ùå –ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç.';
        break;
      case 'AI_SERVICE_ERROR':
        userMessage = 'ü§ñ –°–µ—Ä–≤–∏—Å –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        break;
      case 'DATABASE_ERROR':
        userMessage = 'üíæ –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        break;
      default:
        userMessage = `‚ùå ${error.message}`;
    }
  } else if (error instanceof APIError) {
    switch (error.service) {
      case 'OPENAI':
        userMessage = 'ü§ñ –°–µ—Ä–≤–∏—Å –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        break;
      case 'DATABASE':
        userMessage = 'üíæ –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        break;
      default:
        userMessage = 'üåê –í–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  ctx.reply(userMessage).catch(console.error);
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function validateInput(data, rules) {
  const errors = [];

  for (const [field, rule] of Object.entries(rules)) {
    const value = data[field];

    if (rule.required && (!value || value.toString().trim() === '')) {
      errors.push(`–ü–æ–ª–µ "${field}" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`);
    }

    if (value && rule.minLength && value.length < rule.minLength) {
      errors.push(`–ü–æ–ª–µ "${field}" –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º ${rule.minLength} —Å–∏–º–≤–æ–ª–æ–≤`);
    }

    if (value && rule.maxLength && value.length > rule.maxLength) {
      errors.push(`–ü–æ–ª–µ "${field}" –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º ${rule.maxLength} —Å–∏–º–≤–æ–ª–æ–≤`);
    }

    if (value && rule.pattern && !rule.pattern.test(value)) {
      errors.push(`–ü–æ–ª–µ "${field}" –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç`);
    }

    if (value && rule.type) {
      switch (rule.type) {
        case 'number':
          if (isNaN(value)) {
            errors.push(`–ü–æ–ª–µ "${field}" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º`);
          }
          break;
        case 'email':
          if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) {
            errors.push(`–ü–æ–ª–µ "${field}" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º email`);
          }
          break;
      }
    }
  }

  return errors;
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
async function safeAsync(fn, fallback = null) {
  try {
    return await fn();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ safeAsync:', error);
    return fallback;
  }
}

/**
 * Retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
 */
async function retry(fn, maxAttempts = 3, delay = 1000) {
  let lastError;
  
  for (let attempt = 1; attempt <= maxAttempts; attempt++) {
    try {
      return await fn();
    } catch (error) {
      lastError = error;
      console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
      
      if (attempt < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, delay * attempt));
      }
    }
  }
  
  throw lastError;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
 */
async function checkServiceHealth(serviceName, checkFn) {
  try {
    await checkFn();
    return { service: serviceName, status: 'healthy', timestamp: new Date().toISOString() };
  } catch (error) {
    return { 
      service: serviceName, 
      status: 'unhealthy', 
      error: error.message,
      timestamp: new Date().toISOString() 
    };
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function formatErrorForLog(error, context = {}) {
  return {
    name: error.name,
    message: error.message,
    stack: error.stack,
    code: error.code,
    service: error.service,
    statusCode: error.statusCode,
    context,
    timestamp: new Date().toISOString()
  };
}

module.exports = {
  BotError,
  APIError,
  handleBotError,
  validateInput,
  safeAsync,
  retry,
  checkServiceHealth,
  formatErrorForLog
};
