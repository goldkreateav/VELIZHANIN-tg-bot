/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 */

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram
 */
const formatText = {
  bold: (text) => `*${text}*`,
  italic: (text) => `_${text}_`,
  code: (text) => `\`${text}\``,
  pre: (text) => `\`\`\`${text}\`\`\``,
  link: (text, url) => `[${text}](${url})`,
  mention: (username) => `@${username}`
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–≤–µ—Å—Ç–∞
 */
function formatQuestResult(score, totalQuestions, results) {
  const percentage = Math.round((score / (totalQuestions * 10)) * 100);
  const emoji = percentage >= 80 ? 'üèÜ' : percentage >= 60 ? 'ü•à' : percentage >= 40 ? 'ü•â' : 'üìù';
  
  let message = `${emoji} *–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–≤–µ—Å—Ç–∞*\n\n`;
  message += `üìä –û—á–∫–∏: ${score}/${totalQuestions * 10}\n`;
  message += `üìà –ü—Ä–æ—Ü–µ–Ω—Ç: ${percentage}%\n\n`;
  
  message += `üìã *–î–µ—Ç–∞–ª–∏:*\n`;
  results.forEach((result, index) => {
    const status = result.isCorrect ? '‚úÖ' : '‚ùå';
    message += `${status} –í–æ–ø—Ä–æ—Å ${index + 1}: ${result.isCorrect ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ' : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}\n`;
  });
  
  if (percentage >= 80) {
    message += `\nüéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –∑–Ω–∞—Ç–æ–∫!`;
  } else if (percentage >= 60) {
    message += `\nüëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏.`;
  } else if (percentage >= 40) {
    message += `\nüìö –ù–µ–ø–ª–æ—Ö–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`;
  } else {
    message += `\nüí™ –ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å! –£—á–µ–±–∞ - —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å.`;
  }
  
  return message;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
 */
function formatLeaderboard(leaderboard) {
  if (!leaderboard || leaderboard.length === 0) {
    return 'üèÜ *–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤*\n\n–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—à–µ–ª –∫–≤–µ—Å—Ç. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!';
  }
  
  let message = 'üèÜ *–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤*\n\n';
  
  leaderboard.forEach((player, index) => {
    const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
    const name = player.first_name || player.username || '–ê–Ω–æ–Ω–∏–º';
    const date = new Date(player.completed_at).toLocaleDateString('ru-RU');
    
    message += `${medal} ${name}: ${player.score} –æ—á–∫–æ–≤ (${date})\n`;
  });
  
  return message;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò
 */
function formatAIResponse(question, answer) {
  let message = `ü§ñ *–û—Ç–≤–µ—Ç –ò–ò*\n\n`;
  message += `‚ùì *–í–∞—à –≤–æ–ø—Ä–æ—Å:* ${question}\n\n`;
  message += `üí° *–û—Ç–≤–µ—Ç:* ${answer}`;
  
  return message;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
 */
function formatAboutBot() {
  return `‚ÑπÔ∏è *–û –±–æ—Ç–µ VELIZHANIN*

üéØ *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
‚Ä¢ AI-—Å–æ–≤–µ—Ç–Ω–∏–∫ –Ω–∞ –±–∞–∑–µ OpenAI
‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
‚Ä¢ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏

üöÄ *–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:*
‚Ä¢ Node.js + Telegraf
‚Ä¢ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ OpenAI GPT-3.5
‚Ä¢ Telegram Mini App

üë®‚Äçüíª *–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è:* –°—Ç—É–¥–∏—è VELIZHANIN

üí¨ *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* @ana_freud`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
 */
function formatTime(timestamp) {
  return new Date(timestamp).toLocaleString('ru-RU', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown
 */
function escapeMarkdown(text) {
  return text.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å Markdown
 */
function safeMarkdownMessage(text, parseMode = 'Markdown') {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—Å–∏—Ç—Å—è
    if (parseMode === 'Markdown') {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å Markdown
      const asteriskCount = (text.match(/\*/g) || []).length;
      if (asteriskCount % 2 !== 0) {
        console.warn('–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã * –≤ Markdown, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏');
        return { text, parse_mode: undefined };
      }
    }
    return { text, parse_mode: parseMode };
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏:', error.message);
    return { text, parse_mode: undefined };
  }
}

/**
 * –û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞
 */
function truncateText(text, maxLength = 100) {
  if (text.length <= maxLength) return text;
  return text.substring(0, maxLength - 3) + '...';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function formatStats(stats) {
  return `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n` +
         `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.users || 0}\n` +
         `üéØ –ö–≤–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: ${stats.quests || 0}\n` +
         `ü§ñ AI –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.aiRequests || 0}\n` +
         `üí¨ –û—Ç–∑—ã–≤–æ–≤: ${stats.feedback || 0}`;
}

module.exports = {
  formatText,
  formatQuestResult,
  formatLeaderboard,
  formatAIResponse,
  formatAboutBot,
  formatTime,
  escapeMarkdown,
  safeMarkdownMessage,
  truncateText,
  formatStats
};
